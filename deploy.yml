version: '3.4'

services:
  gateway:
    image: openfaas/gateway:0.18.10
    ports:
      - 8080:8080
    networks:
      - functions
    environment:
      functions_provider_url: "http://faas-swarm:8080/"
      read_timeout: "300s"        # Maximum time to read HTTP request
      write_timeout: "300s"        # Maximum time to write HTTP response
      upstream_timeout: "300s"     # Maximum duration of upstream function call - should be more than read_timeout and write_timeout
      dnsrr: "true"               # Temporarily use dnsrr in place of VIP while issue persists on PWD
      faas_nats_address: "nats"
      faas_nats_port: 4222
      direct_functions: "true"    # Functions are invoked directly over the overlay network
      direct_functions_suffix: ""
      basic_auth: "${BASIC_AUTH:-true}"
      secret_mount_path: "/run/secrets/"
      scale_from_zero: "false"
    healthcheck:
      test: ['CMD', 'wget', '--spider', 'http://127.0.0.1:8080/healthz']
      interval: 10s
      timeout: 10s
      start_period: 10s
      retries: 3
    deploy:
      resources:
        # limits:   # Enable if you want to limit memory usage
        #     memory: 200M
        reservations:
          memory: 100M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 20
        window: 380s
      placement:
        constraints:
          - 'node.platform.os == linux'
    secrets:
      - basic-auth-user
      - basic-auth-password

  # Docker Swarm provider
  faas-swarm:
    image:  openfaas/faas-swarm:0.8.5
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - functions
    environment:
      read_timeout:  "300s"   # set both here, and on your functions
      write_timeout: "300s"   # set both here, and on your functions
      DOCKER_API_VERSION: "1.30"
      basic_auth: "${BASIC_AUTH:-true}"
      secret_mount_path: "/run/secrets/"
    healthcheck:
      test: ['CMD', 'wget', '--spider', 'http://127.0.0.1:8080/healthz']
      interval: 10s
      timeout: 10s
      start_period: 10s
      retries: 3
    deploy:
      placement:
        constraints:
          - 'node.role == manager'
          - 'node.platform.os == linux'
      resources:
        # limits:   # Enable if you want to limit memory usage
        #     memory: 100M
        reservations:
          memory: 100M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 20
        window: 380s
    secrets:
      - basic-auth-user
      - basic-auth-password

  nats:
    image: nats-streaming:0.17.0
    # Uncomment the following port mappings if you wish to expose the
    # NATS client and/or management ports you must also add `-m 8222` to the command
    # ports:
    #     - 4222:4222
    #     - 8222:8222
    command: "--store memory --cluster_id faas-cluster"
    networks:
      - functions
    deploy:
      resources:
        limits:
          memory: 125M
        reservations:
          memory: 50M
      placement:
        constraints:
          - 'node.platform.os == linux'
      restart_policy:
        condition: on-failure

  queue-worker:
    image: openfaas/queue-worker:0.9.0
    networks:
      - functions
    environment:
      max_inflight: "1"
      ack_wait: "300s"    # Max duration of any async task / request
      basic_auth: "${BASIC_AUTH:-true}"
      secret_mount_path: "/run/secrets/"
    deploy:
      resources:
        limits:
          memory: 50M
        reservations:
          memory: 20M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 20
        window: 380s
      placement:
        constraints:
          - 'node.platform.os == linux'
    secrets:
      - basic-auth-user
      - basic-auth-password

  # End services

  # Start monitoring

  prometheus:
    image: prom/prometheus:v2.16.0
    environment:
      no_proxy: "gateway"
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml
      - source: prometheus_rules
        target: /etc/prometheus/alert.rules.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    #   - '-storage.local.path=/prometheus'
    ports:
      - 9090:9090
    networks:
      - functions
    deploy:
      placement:
        constraints:
          - 'node.role == manager'
          - 'node.platform.os == linux'
      resources:
        limits:
          memory: 500M
        reservations:
          memory: 200M
      restart_policy:
        condition: on-failure

  alertmanager:
    image: prom/alertmanager:v0.20.0
    environment:
      no_proxy: "gateway"
    command:
      - '--config.file=/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - functions
    deploy:
      resources:
        limits:
          memory: 50M
        reservations:
          memory: 20M
      placement:
        constraints:
          - 'node.role == manager'
          - 'node.platform.os == linux'
      restart_policy:
        condition: on-failure
    configs:
      - source: alertmanager_config
        target: /alertmanager.yml

  zookeeper:
    image: confluentinc/cp-zookeeper:${CONFLUENT_PLATFORM_VERSION:-5.4.0}
    hostname: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - streaming
    ports:
      - 2181:2181
    deploy:
      restart_policy:
        condition: on-failure

  kafka:
    image: confluentinc/cp-kafka:${CONFLUENT_PLATFORM_VERSION:-5.4.0}
    hostname: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # https://github.com/confluentinc/schema-registry/issues/648
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://${KAFKA_PUBLIC_HOSTNAME:-localhost}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
     - 9092:9092
    networks:
      - streaming
    deploy:
      restart_policy:
        condition: on-failure

  kafka-rest:
    image: confluentinc/cp-kafka-rest:${CONFLUENT_PLATFORM_VERSION:-5.4.0}
    hostname: kafka-rest
    environment:
      ACCESS_CONTROL_ALLOW_ORIGIN_DEFAULT: '*'
      KAFKA_REST_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_REST_LISTENERS: http://0.0.0.0:8082
      KAFKA_REST_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KAFKA_REST_HOST_NAME: kafka-rest
    ports:
      - 8082:8082
    networks:
      - streaming
    deploy:
      restart_policy:
        condition: on-failure

  schema-registry:
    image: confluentinc/cp-schema-registry:${CONFLUENT_PLATFORM_VERSION:-5.4.0}
    hostname: schema-registry
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
    networks:
      - streaming
    deploy:
      restart_policy:
        condition: on-failure

  kafka-topics-ui:
    image: landoop/kafka-topics-ui:0.9.4
    environment:
      - KAFKA_REST_PROXY_URL=http://kafka-rest:8082
      - PROXY=true
    ports:
      - 8001:8000
    networks:
      - streaming
    deploy:
      restart_policy:
        condition: on-failure

  connector:
    image: openfaas/kafka-connector:0.4.0
    hostname: kafka-connector
    environment:
      gateway_url: http://gateway:8080
      broker_host: kafka:29092
      topics: faas-request,log-data,register-device
      print_response: 'true'
      print_response_body: 'true'
      basic_auth: '${BASIC_AUTH:-true}'
      secret_mount_path: '/run/secrets/'
    secrets:
      - basic-auth-password
      - basic-auth-user
    networks:
      - streaming
      - functions
    deploy:
      restart_policy:
        condition: on-failure

  mongo:
    image: mongo:4.2.3
    hostname: mongo
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_PASSWORD_FILE: "/run/secrets/mongo-root-password"
      MONGO_INITDB_ROOT_USERNAME_FILE: "/run/secrets/mongo-root-username"
      MONGO_INITDB_DATABASE: sensordata
    healthcheck:
      test: ['CMD', 'mongo', '--quiet', '127.0.0.1/test', '--eval', 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 1)']
      interval: 10s
      timeout: 10s
      start_period: 10s
      retries: 3
    secrets:
      - mongo-root-password
      - mongo-root-username
    volumes:
      - db-data:/data/db
    networks:
      - database
      - functions
    deploy:
      restart_policy:
        condition: on-failure

  mongo-express:
    image: mongo-express:0.54.0
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${ME_CONFIG_MONGODB_ADMINUSERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${ME_CONFIG_MONGODB_ADMINPASSWORD}
    networks:
      - database
    deploy:
      restart_policy:
        condition: on-failure

configs:
  prometheus_config:
    file: ./prometheus/prometheus.yml
  prometheus_rules:
    file: ./prometheus/alert.rules.yml
  alertmanager_config:
    file: ./prometheus/alertmanager.yml

volumes:
  db-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${DATABASE_DIR}

networks:
  streaming:
    driver: overlay
    attachable: true
  database:
    driver: overlay
    attachable: true
  functions:
    driver: overlay
    attachable: true
    labels:
      - "openfaas=true"

secrets:
  basic-auth-password:
    external: true
  basic-auth-user:
    external: true
  mongo-root-password:
    external: true
  mongo-root-username:
    external: true
